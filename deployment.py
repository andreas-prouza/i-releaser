
import datetime
import json
import logging
import argparse

from etc import logger_config, constants
from modules import meta_file, deploy_version


#################################################################
# Parser settings
#################################################################

parser = argparse.ArgumentParser(
  prog='Deployment tool',
  description='Find detailed description in README.md',
  epilog='Example: ...'
)

parser.add_argument('-a', '--action', help='Run action: create a new deplyoment request; run a stage', choices=['create', 'run'], required=True)
parser.add_argument('-d', '--deploy-version', help='Version of deployment', required=False)
parser.add_argument('-s', '--stage', help='Name of the stage to process', required=False)
#parser.add_argument('-c', '--create', help='Creates a new deployment. Workflow (-w/--workflow) and object file list (-o/--object_file_list) is neseccary', required=False, action='store_true')
parser.add_argument('-w', '--workflow', help='Name of the workflow to use for the deplyoment, defined in ./etc/workflow.json', required=False)
parser.add_argument('-o', '--object-file-list', help='Object file list (generated by GNU make)', required=False)

args = parser.parse_args()

print(vars(args))

if args.action == 'create' and (args.workflow is None or args.object_file_list is None):
  parser.error("To create a deployment reqauest, parameters workflow (-w) and object_file_list (-o) are required")

if args.action == 'run' and (args.stage is None or args.deploy_version is None):
  parser.error("To run a deployment, parameters stage (-s) and deploy_version (-d) are required")


#exit(0)
#################################################################


def create_deployment_request(args):

  logging.debug(f"Create new deployment request: {args.workflow=}, {args.object_file_list=}")

  mf = meta_file.Meta_File(workflow_name=args.workflow)
  mf.import_objects_from_config_file(args.object_file_list)
  mf.set_status(meta_file.Meta_file_status.READY)
  mf.write_meta_file()

  logging.debug(f"New request created: {mf.deploy_version=}, {mf.file_name=}")



def run_stage(args):

  logging.debug(f"Run stage: {args.deploy_version=}, {args.stage=}")
  mf = meta_file.Meta_File.load_version(args.deploy_version)
  mf.run_stage(args.stage)

  logging.debug(f"Stage {args.stage} successfully completed. Current stages now: {mf.current_stages}")



action = {
  'create': create_deployment_request,
  'run': run_stage
}



if __name__ == "__main__":
  action[args.action](args)

